/**
 * SuperChat Server
 * Main entry point for the application
 */

const dotenv = require('dotenv');
const path = require('path');
const fs = require('fs').promises;
const logger = require('./utils/logger');

// Load environment variables
function loadEnvironment() {
  // Try loading from .env.new first, then fall back to .env
  const envNewPath = path.resolve(__dirname, '.env.new');
  const envPath = path.resolve(__dirname, '.env');
  
  // Check if .env.new exists and use it preferentially
  try {
    if (fs.statSync(envNewPath).isFile()) {
      dotenv.config({ path: envNewPath });
      logger.info('Environment variables loaded from .env.new');
      
      // Validate API key
      if (process.env.ANTHROPIC_API_KEY) {
        logger.info('API Key loaded from .env.new:', `${process.env.ANTHROPIC_API_KEY.substring(0, 20)}...${process.env.ANTHROPIC_API_KEY.substring(process.env.ANTHROPIC_API_KEY.length - 20)}`);
        logger.info('API Key length:', process.env.ANTHROPIC_API_KEY.length);
      } else {
        logger.warn('API Key not found in .env.new');
      }
      
      return true;
    }
  } catch (err) {
    // .env.new doesn't exist, continue to .env
  }
  
  // Fall back to standard .env file
  try {
    if (fs.statSync(envPath).isFile()) {
      dotenv.config({ path: envPath });
      logger.info('Environment variables loaded from .env');
      
      // Validate API key
      if (process.env.ANTHROPIC_API_KEY) {
        logger.info('API Key loaded from .env:', `${process.env.ANTHROPIC_API_KEY.substring(0, 20)}...${process.env.ANTHROPIC_API_KEY.substring(process.env.ANTHROPIC_API_KEY.length - 20)}`);
        logger.info('API Key length:', process.env.ANTHROPIC_API_KEY.length);
      } else {
        logger.warn('API Key not found in .env');
      }
      
      return true;
    }
  } catch (err) {
    logger.error('Error loading environment variables:', err.message);
  }
  
  // If we get here, no environment file was loaded
  logger.warn('No .env or .env.new file found, using default environment variables');
  return false;
}

// Initialize PDF service
async function initializePdfService() {
  // Skip PDF service initialization if explicitly disabled
  if (process.env.DISABLE_PDF_SERVICE_ON_STARTUP === 'true') {
    logger.info('PDF service initialization disabled by environment variable');
    return;
  }
  
  try {
    // Import and initialize PDF service
    const { testPDF } = require('./services/pdf-service');
    
    logger.info('Testing PDF service...');
    const testPath = await testPDF();
    logger.info(`PDF service test successful, generated file at: ${testPath}`);
    
    // Clean up test file
    try {
      await fs.unlink(testPath);
      logger.debug('Test PDF file cleaned up');
    } catch (cleanupErr) {
      logger.warn('Could not clean up test PDF file:', cleanupErr.message);
    }
  } catch (err) {
    logger.error('Failed to initialize PDF service:', err.message);
    logger.warn('PDF export functionality may not work correctly');
  }
}

// Initialize admin components
function initializeAdmin() {
  try {
    // Run admin migrations
    require('./admin-migration');
    logger.info('Admin migrations completed successfully');
  } catch (err) {
    logger.error('Failed to run admin migrations:', err.message);
  }
}

// Main startup function
async function startServer() {
  try {
    // Load environment variables
    loadEnvironment();
    
    // Get port from environment
    const PORT = process.env.PORT || 5000;
    
    // Initialize admin components
    initializeAdmin();
    
    // Initialize the Express application
    const { app, initializeApp } = require('./app');
    initializeApp();
    
    // Initialize PDF service in the background
    initializePdfService().catch(err => {
      logger.error('Background PDF service initialization failed:', err.message);
    });
    
    // Start the server
    app.listen(PORT, '0.0.0.0', () => {
      logger.important(`Server running on port ${PORT} and bound to all interfaces`);
      logger.info(`Environment: ${process.env.NODE_ENV || 'development'}`);
      logger.info(`Log level: ${logger.getLogLevel()}`);
    });
  } catch (err) {
    logger.error('Failed to start server:', err);
    process.exit(1);
  }
}

// Start the server if this file is run directly
if (require.main === module) {
  startServer();
}

// Export for testing
module.exports = { startServer };