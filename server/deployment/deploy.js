/**
 * SuperChat Deployment Script
 * Configures the application for deployment across different environments
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

// Detect environment
const arch = os.arch();
const platform = os.platform();
const isARM = arch === 'arm64' || arch === 'aarch64';
const isLinux = platform === 'linux';
const isWindows = platform === 'win32';

console.log('===============================================');
console.log('SuperChat Deployment Configuration');
console.log('===============================================');
console.log(`Platform: ${platform}`);
console.log(`Architecture: ${arch}`);
console.log(`Node.js Version: ${process.version}`);
console.log(`Working Directory: ${process.cwd()}`);
console.log('===============================================');

// Paths
const serverDir = path.resolve(__dirname, '..');
const configDir = path.join(serverDir, 'config');
const tempDir = path.join(serverDir, 'temp');

// Ensure directories exist
function ensureDirectories() {
  console.log('Ensuring required directories exist...');
  
  // Create directories if they don't exist
  [configDir, tempDir].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`Created directory: ${dir}`);
    }
  });
}

// Configure environment
function configureEnvironment() {
  console.log('Configuring environment...');
  
  // Create environment file with common settings
  const envPath = path.join(serverDir, '.env.new');
  const envLines = [
    '# SuperChat Server Environment',
    '# Generated by deployment script',
    '',
    '# Server Configuration',
    'PORT=5050',
    `NODE_ENV=${process.env.NODE_ENV || 'production'}`,
    'LOG_LEVEL=INFO',
    '',
    '# PDF Service Configuration',
    `PDF_SERVICE=puppeteer`,
  ];
  
  // Add architecture-specific settings
  if (isLinux) {
    if (isARM) {
      // ARM64 Linux configuration
      envLines.push(...[
        '',
        '# ARM64 Linux Configuration',
        'PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true',
        'PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser',
        'CHROME_BIN=/usr/bin/chromium-browser',
        '',
        '# Memory Management for ARM64',
        'NODE_OPTIONS=--max-old-space-size=2048',
        '',
        '# Disable PDF service initialization at startup',
        'DISABLE_PDF_SERVICE_ON_STARTUP=true'
      ]);
    } else {
      // x86_64 Linux configuration
      envLines.push(...[
        '',
        '# x86_64 Linux Configuration',
        'PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true',
        'PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome',
        'CHROME_BIN=/usr/bin/google-chrome',
        '',
        '# Memory Management',
        'NODE_OPTIONS=--max-old-space-size=2048'
      ]);
    }
  } else if (isWindows) {
    // Windows configuration
    envLines.push(...[
      '',
      '# Windows Configuration',
      'PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false',
      '',
      '# Memory Management',
      'NODE_OPTIONS=--max-old-space-size=2048'
    ]);
  } else {
    // MacOS or other configuration
    envLines.push(...[
      '',
      '# Standard Configuration',
      'PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false',
      '',
      '# Memory Management',
      'NODE_OPTIONS=--max-old-space-size=2048'
    ]);
  }
  
  // Write environment file
  fs.writeFileSync(envPath, envLines.join('\n'), 'utf8');
  console.log(`Environment configuration written to: ${envPath}`);
  
  // Copy appropriate configuration files
  if (!fs.existsSync(path.join(configDir, 'puppeteer-config.js'))) {
    const puppeteerConfigPath = path.join(__dirname, 'templates', 'puppeteer-config.js');
    fs.copyFileSync(puppeteerConfigPath, path.join(configDir, 'puppeteer-config.js'));
    console.log('Puppeteer configuration copied to config directory');
  }
}

// Install dependencies
function installDependencies() {
  console.log('Installing dependencies...');
  
  try {
    console.log('Running npm install...');
    execSync('npm install', { cwd: serverDir, stdio: 'inherit' });
    console.log('Dependencies installed successfully');
  } catch (error) {
    console.error('Error installing dependencies:', error.message);
    process.exit(1);
  }
}

// Apply code updates
function applyCodeUpdates() {
  console.log('Applying code updates...');
  
  // List of files to update with their new versions
  const filesToUpdate = [
    { source: 'index.js.new', target: 'index.js' },
    { source: 'services/pdf-service/index.js.new', target: 'services/pdf-service/index.js' }
  ];
  
  // Copy each file
  filesToUpdate.forEach(({ source, target }) => {
    const sourcePath = path.join(serverDir, source);
    const targetPath = path.join(serverDir, target);
    
    // Check if source file exists
    if (fs.existsSync(sourcePath)) {
      // Create backup of target file if it exists
      if (fs.existsSync(targetPath)) {
        const backupPath = `${targetPath}.backup.${Date.now()}`;
        fs.copyFileSync(targetPath, backupPath);
        console.log(`Created backup of ${target} at ${path.basename(backupPath)}`);
      }
      
      // Copy new file
      fs.copyFileSync(sourcePath, targetPath);
      console.log(`Updated ${target} with new version`);
    } else {
      console.warn(`Source file ${source} not found, skipping update`);
    }
  });
}

// Verify installation
function verifyInstallation() {
  console.log('Verifying installation...');
  
  // Paths to check
  const requiredFiles = [
    path.join(serverDir, 'index.js'),
    path.join(serverDir, 'app.js'),
    path.join(serverDir, 'services/pdf-service/index.js'),
    path.join(configDir, 'puppeteer-config.js')
  ];
  
  // Check each file
  const missingFiles = requiredFiles.filter(file => !fs.existsSync(file));
  
  if (missingFiles.length > 0) {
    console.error('The following required files are missing:');
    missingFiles.forEach(file => console.error(`- ${file}`));
    process.exit(1);
  }
  
  console.log('All required files are present');
  
  // Verify environment
  if (!fs.existsSync(path.join(serverDir, '.env.new'))) {
    console.error('Environment file .env.new is missing');
    process.exit(1);
  }
  
  console.log('Environment file is present');
  
  // Verify npm packages
  try {
    execSync('npm list express puppeteer dotenv', { cwd: serverDir, stdio: 'pipe' });
    console.log('Required npm packages are installed');
  } catch (error) {
    console.warn('Some npm packages may be missing:', error.message);
  }
}

// Create deployment-specific templates directory
function createTemplatesDir() {
  const templatesDir = path.join(__dirname, 'templates');
  
  if (!fs.existsSync(templatesDir)) {
    fs.mkdirSync(templatesDir, { recursive: true });
    console.log(`Created templates directory: ${templatesDir}`);
    
    // Create puppeteer config template if it doesn't exist
    const puppeteerConfigPath = path.join(templatesDir, 'puppeteer-config.js');
    const puppeteerConfigContent = `/**
 * Puppeteer configuration for different environments
 */

const os = require('os');

// Detect if running on ARM architecture
const isArmArchitecture = ['arm', 'arm64', 'aarch64'].includes(os.arch());
const isLinux = os.platform() === 'linux';

// Default configuration
const baseConfig = {
  headless: 'new',
  args: [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-dev-shm-usage',
    '--disable-gpu'
  ]
};

// ARM-specific configuration
const armConfig = {
  headless: 'new',
  args: [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-dev-shm-usage',
    '--disable-gpu-sandbox',
    '--use-gl=egl',
    '--single-process',
    '--disable-breakpad',
    '--no-zygote',
    '--disable-accelerated-2d-canvas'
  ]
};

// Linux-specific configuration (non-ARM)
const linuxConfig = {
  headless: 'new',
  args: [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-dev-shm-usage',
    '--disable-gpu',
    '--font-render-hinting=none',
    '--disable-features=site-per-process'
  ]
};

// Determine which configuration to use
let config;
if (isArmArchitecture) {
  config = armConfig;
} else if (isLinux) {
  config = linuxConfig;
} else {
  config = baseConfig;
}

module.exports = config;
`;
    
    fs.writeFileSync(puppeteerConfigPath, puppeteerConfigContent, 'utf8');
    console.log(`Created Puppeteer config template: ${puppeteerConfigPath}`);
  }
}

// Main function
function deploy() {
  try {
    console.log('Starting SuperChat deployment...');
    
    // Create templates directory
    createTemplatesDir();
    
    // Ensure required directories exist
    ensureDirectories();
    
    // Apply code updates
    applyCodeUpdates();
    
    // Configure environment
    configureEnvironment();
    
    // Install dependencies
    installDependencies();
    
    // Verify installation
    verifyInstallation();
    
    console.log('===============================================');
    console.log('SuperChat deployment completed successfully!');
    console.log('===============================================');
    console.log('To start the server, run:');
    console.log('  node server/index.js');
    console.log('===============================================');
  } catch (error) {
    console.error('Deployment failed:', error);
    process.exit(1);
  }
}

// Run deployment if script is executed directly
if (require.main === module) {
  deploy();
}

module.exports = { deploy };